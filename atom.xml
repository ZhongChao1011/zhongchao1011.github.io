<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jason&#39;s blog</title>
  
  
  <link href="/zhongchao1011.github.io/atom.xml" rel="self"/>
  
  <link href="https://itoure.com/zhongchao1011.github.io/"/>
  <updated>2017-09-14T03:48:47.000Z</updated>
  <id>https://itoure.com/zhongchao1011.github.io/</id>
  
  <author>
    <name>Jason Zhong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用shell切割nginx日志</title>
    <link href="https://itoure.com/zhongchao1011.github.io/2017/09/14/%E5%88%A9%E7%94%A8shell%E5%88%87%E5%89%B2nginx%E6%97%A5%E5%BF%97/"/>
    <id>https://itoure.com/zhongchao1011.github.io/2017/09/14/利用shell切割nginx日志/</id>
    <published>2017-09-14T03:47:40.000Z</published>
    <updated>2017-09-14T03:48:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>Nginx是目前最流行的Web Server，由于属于轻量级web性能强劲，受到各大互联网公司广泛使用，优点非常多，但缺点也是有的，比如nginx不能自动按天切割日志，访问日志就一直往一个文件写入，随着时间的累积，日志文件变的非常庞大，到时处理分析日志也非常麻烦，所有我们就自己动手写一个shell脚本进行日志切割。具体如下;</strong></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>!/bin/bash</div><div class="line"><span class="meta">#</span>@author: Jason Zhong</div><div class="line"><span class="meta">#</span>@date: 2017-09-14</div><div class="line"></div><div class="line"><span class="meta">#</span> 设置nginx日志所在路径.</div><div class="line">LOG_PATH="/path/to/nginx"</div><div class="line"></div><div class="line"><span class="meta">#</span> PID文件所在位置</div><div class="line">LOG_PID="/var/run/nginx.pid"</div><div class="line"></div><div class="line"><span class="meta">#</span> 进行日志切割并以时间结尾重命名.</div><div class="line">mv $&#123;LOG_PATH&#125;/*.log $&#123;LOG_PATH&#125;/*.log.$(date -d "yesterday" +"%Y%m%d")</div><div class="line"></div><div class="line"><span class="meta">#</span> 向nginx主进程发起日志重启的信号.</div><div class="line">kill -USR1 `cat $&#123;LOG_PID&#125;`</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Nginx是目前最流行的Web Server，由于属于轻量级web性能强劲，受到各大互联网公司广泛使用，优点非常多，但缺点也是有的，比如nginx不能自动按天切割日志，访问日志就一直往一个文件写入，随着时间的累积，日志文件变的非常庞
      
    
    </summary>
    
    
      <category term="nginx" scheme="https://itoure.com/zhongchao1011.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Git详细教程</title>
    <link href="https://itoure.com/zhongchao1011.github.io/2017/09/13/Git%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
    <id>https://itoure.com/zhongchao1011.github.io/2017/09/13/Git详细教程/</id>
    <published>2017-09-13T07:46:08.000Z</published>
    <updated>2017-09-13T08:50:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、Git工作流程"><a href="#一、Git工作流程" class="headerlink" title="一、Git工作流程"></a>一、Git工作流程</h3><p><img src="http://ow5m7h8kd.bkt.clouddn.com/git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.jpeg" alt="image"><br>以上包括一些简单而常用的命令，但是先不关心这些，先来了解下面这4个专有名词。</p><ul><li>Workspace: 工作区</li><li>Index/Stage: 暂存区</li><li>Repositoy: 仓库区（或本地仓库）</li><li>Remote: 远程仓库</li></ul><blockquote><p>==<strong>工作区</strong>==</p></blockquote><p>程序员进行开发改动的地方，是你当前看到的，也是最新的。<br>平常我们开发就是拷贝远程仓库中的一个分支，基于该分支进行开发。在开发过程中就是对工作区的操作。</p><blockquote><p>==<strong>暂存区</strong>==</p></blockquote><p>.git目录下的index文件，暂存区会记录git add添加文件的相关信息（文件名、大小、timestamp…），不保存文件实体，通过id指向每个文件实体。可以使用git status查看暂存区的状态。暂存区标记了你当前工作区中，哪些内容是被git管理的。</p><p>当你完成某个需求或功能后需要提交到远程仓库，那么第一步就是通过git add先提交到暂存区，被git管理。</p><blockquote><p>==<strong>本地仓库</strong>==</p></blockquote><p>保存了对象被提交 过的各个版本，比起工作区和暂存区的内容，它要更旧一些。</p><p>git commit后同步index的目录树到本地仓库，方便从下一步通过git push同步本地仓库与远程仓库的同步。</p><blockquote><p>==<strong>远程仓库</strong>==</p></blockquote><p>远程仓库的内容可能被分布在多个地点的处于协作关系的本地仓库修改，因此它可能与本地仓库同步，也可能不同步，但是它的内容是最旧的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">小结</div><div class="line"></div><div class="line">1.任何对象都是在工作区中诞生和被修改；</div><div class="line">2.任何修改都是从进入index区才开始被版本控制；</div><div class="line">3.只有把修改提交到本地仓库，该修改才能在仓库中留下痕迹；</div><div class="line">4.与协作者分享本地的修改，可以把它们push到远程仓库来共享。</div></pre></td></tr></table></figure><p>下面这幅图更加直接阐述了四个区域之间的关系，可能有些命令不太清楚，没关系，下部分会详细介绍。<br><img src="http://ow5m7h8kd.bkt.clouddn.com/git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%8C%BA%E5%9F%9F%E5%85%B3%E7%B3%BB.jpeg" alt="image"></p><h3 id="二、常用Git命令"><a href="#二、常用Git命令" class="headerlink" title="二、常用Git命令"></a>二、常用Git命令</h3><p><img src="http://ow5m7h8kd.bkt.clouddn.com/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.jpeg" alt="image"></p><p>网上找了个图，别人整理的一张图，很全很好，借来用下。下面详细解释一些常用命令。</p><blockquote><p><strong>==HEAD==</strong></p></blockquote><p><img src="http://ow5m7h8kd.bkt.clouddn.com/HEAD.jpeg" alt="image"></p><p>在掌握具体命令前，先理解下HEAD。</p><p>HEAD，它始终指向当前所处分支的最新的提交点。你所处的分支变化了，或者产生了新的提交点，HEAD就会跟着改变。</p><blockquote><p><strong>==add==</strong></p></blockquote><p><img src="http://ow5m7h8kd.bkt.clouddn.com/git_add.jpeg" alt="image"></p><p>add相关命令很简单，主要实现将工作区修改的内容提交到暂存区，交由git管理。</p><table><thead><tr><th>Command</th><th>Note</th></tr></thead><tbody><tr><td>git add .</td><td>添加当前目录的所有文件到暂存区</td></tr><tr><td>git add <dir></dir></td><td>添加指定目录到暂存区，包括子目录</td></tr><tr><td>git add <file1></file1></td><td>添加指定文件到暂存区</td></tr></tbody></table><blockquote><p><strong>==commit==</strong></p></blockquote><p><img src="http://ow5m7h8kd.bkt.clouddn.com/git_commit.jpeg" alt="image">    </p><p>commit相关命令也很简单，主要实现将暂存区的内容提交到本地仓库，并使得当前分支的HEAD向后移动一个提交点。</p><table><thead><tr><th>Command</th><th>Note</th></tr></thead><tbody><tr><td>git commit -m <message></message></td><td>提交暂存区到本地仓库,message代表说明信息</td></tr><tr><td>git commit <file1> -m <message></message></file1></td><td>提交暂存区的指定文件到本地仓库</td></tr><tr><td>git commit –amend -m <message></message></td><td>使用一次新的commit，替代上一次提交</td></tr></tbody></table><blockquote><p><strong>==branch==</strong></p></blockquote><p><img src="http://ow5m7h8kd.bkt.clouddn.com/git_branch.jpeg" alt="image"></p><p>涉及到协作，自然会涉及到分支，关于分支，大概有展示分支，切换分支，创建分支，删除分支这四种操作。</p><table><thead><tr><th>Command</th><th>Note</th></tr></thead><tbody><tr><td>git branch</td><td>列出所有本地分支</td></tr><tr><td>git branch -r</td><td>列出所有远程分支</td></tr><tr><td>git branch -a</td><td>列出所有本地分支和远程分支</td></tr><tr><td>git branch <branch-name></branch-name></td><td>新建一个分支，但依然停留在当前分支</td></tr><tr><td>git checkout -b <branch-name></branch-name></td><td>新建一个分支，并切换到该分支</td></tr><tr><td>git branch –track <branch><remote-branch></remote-branch></branch></td><td>新建一个分支，与指定的远程分支建立追踪关系</td></tr><tr><td>git checkout <branch-name></branch-name></td><td>切换到指定分支，并更新工作区</td></tr><tr><td>git branch -d <branch-name></branch-name></td><td>删除分支</td></tr><tr><td>git push origin –delete <branch-name></branch-name></td><td>删除远程分支</td></tr></tbody></table><p>关于分支的操作虽然比较多，但都比较简单好记。</p><blockquote><p><strong>==merge==</strong></p></blockquote><p><img src="http://ow5m7h8kd.bkt.clouddn.com/git_merge.jpeg" alt="image"></p><p>merge命令把不同的分支合并起来。如上图，在实际开放中，我们可能从master分支中切出一个分支，然后进行开发完成需求，中间经过R3,R4,R5的commit记录，最后开发完成需要合入master中，这便用到了merge。</p><table><thead><tr><th>Command</th><th>Note</th></tr></thead><tbody><tr><td>git fetch <remote></remote></td><td>merge之前先拉一下远程仓库最新代码</td></tr><tr><td>git merge <branch></branch></td><td>合并指定分支到当前分支</td></tr></tbody></table><p>一般在merge之后，会出现conflict，需要针对冲突情况，手动解除冲突。主要是因为两个用户修改了同一文件的同一块区域。如下图所示，需要手动解除。</p><p><img src="http://ow5m7h8kd.bkt.clouddn.com/git_%E5%90%88%E5%B9%B6%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81.jpeg" alt="image"></p><blockquote><p>==<strong>rebase</strong>==</p></blockquote><p><img src="http://ow5m7h8kd.bkt.clouddn.com/git_rebase.jpeg" alt="image"></p><p>rebase又称为衍合，是合并的另外一种选择。</p><p>在开始阶段，我们处于new分支上，执行git rebase dev，那么new分支上新的commit都在master分支上重演一遍，最后checkout切换回到new分支。这一点与merge是一样的，合并前后所处的分支并没有改变。git rebase dev，通俗的解释就是new分支想站在dev的肩膀上继续下去。rebase也需要手动解决冲突。</p><p>rebase与merge的区别</p><p>现在我们有这样的两个分支,test和master，提交如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D---E test</div></pre></td></tr></table></figure></p><p>在master执行git merge test,然后会得到如下结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">D------E</div></pre></td></tr></table></figure></p><p>在master执行git rebase test，然后得到如下结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">A---B---D---E---C&apos;---F&apos; test, master</div></pre></td></tr></table></figure></p><p>可以看到，merge操作会生成一个新的节点，之前的提交分开显示。而rebase操作不会生成新的节点，是将两个分支融合成一个线性的提交。</p><p>如果你想要一个干净的，没有merge commit的线性历史树，那么你应该选择git rebase</p><p>如果你想保留完整的历史记录，并且想要避免重写commit history的风险，你应该选择使用git merge</p><blockquote><p>==<strong>reset</strong>==</p></blockquote><p><img src="http://ow5m7h8kd.bkt.clouddn.com/git_reset.jpeg" alt="image"></p><p>reset命令把当前分支指向另一个位置，并且相应的变动工作区和暂存区。</p><table><thead><tr><th>Command</th><th>Note</th></tr></thead><tbody><tr><td>git reset —soft <commit></commit></td><td>只改变提交点，暂存区和工作目录的内容都不改变</td></tr><tr><td>git reset —mixed <commit></commit></td><td>改变提交点，同时改变暂存区的内容</td></tr><tr><td>git reset —hard <commit></commit></td><td>暂存区、工作区的内容都会被修改到与提交点完全一致的状态</td></tr><tr><td>git reset –hard HEAD</td><td>让工作区回到上次提交时的状态</td></tr></tbody></table><blockquote><p>==<strong>revert</strong>==</p></blockquote><p><img src="http://ow5m7h8kd.bkt.clouddn.com/git_revert.jpeg" alt="image"></p><p>git revert用一个新提交来消除一个历史提交所做的任何修改。</p><p><strong>revert与reset的区别</strong></p><p><img src="http://ow5m7h8kd.bkt.clouddn.com/revert%E4%B8%8Ereset%E7%9A%84%E5%8C%BA%E5%88%AB.jpeg" alt="image"></p><ul><li><p>git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit。</p></li><li><p>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为git revert是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，减少冲突。但是git reset是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入，产生很多冲突。关于这一点，不太理解的可以看这篇文章。</p></li><li><p>git reset 是把HEAD向后移动了一下，而git revert是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</p></li></ul><blockquote><p>==<strong>push</strong>==</p></blockquote><p>上传本地仓库分支到远程仓库分支，实现同步。</p><table><thead><tr><th>Command</th><th>Note</th></tr></thead><tbody><tr><td>git push <remote><branch></branch></remote></td><td>上传本地指定分支到远程仓库</td></tr><tr><td>git push <remote> –force</remote></td><td>强行推送当前分支到远程仓库，即使有冲突</td></tr><tr><td>git push <remote> –all</remote></td><td>推送所有分支到远程仓库</td></tr></tbody></table><blockquote><p>==<strong>其他命令</strong>==</p></blockquote><table><thead><tr><th>Command</th><th>Note</th></tr></thead><tbody><tr><td>git status</td><td>显示有变更的文件</td></tr><tr><td>git log</td><td>显示当前分支的版本历史</td></tr><tr><td>git diff</td><td>显示暂存区和工作区的差异</td></tr><tr><td>git diff HEAD</td><td>显示工作区与当前分支最新commit之间的差异</td></tr><tr><td>git cherry-pick <commit></commit></td><td>选择一个commit，合并进当前分支</td></tr></tbody></table><p>以上就是关于Git的一些常用命令及详细阐述，相信能对Git有一个初步的认识。</p><blockquote><p>==<strong>本文声明转载至今日头条，感谢作者酱香酒坊的分享。</strong>==</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、Git工作流程&quot;&gt;&lt;a href=&quot;#一、Git工作流程&quot; class=&quot;headerlink&quot; title=&quot;一、Git工作流程&quot;&gt;&lt;/a&gt;一、Git工作流程&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://ow5m7h8kd.bkt.clouddn.com
      
    
    </summary>
    
    
      <category term="git" scheme="https://itoure.com/zhongchao1011.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>将yum源替换为阿里云yum源</title>
    <link href="https://itoure.com/zhongchao1011.github.io/2017/09/13/%E5%B0%86yum%E6%BA%90%E6%9B%BF%E6%8D%A2%E4%B8%BA%E9%98%BF%E9%87%8C%E4%BA%91yum%E6%BA%90/"/>
    <id>https://itoure.com/zhongchao1011.github.io/2017/09/13/将yum源替换为阿里云yum源/</id>
    <published>2017-09-13T05:44:17.000Z</published>
    <updated>2017-09-13T05:44:58.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><strong>Step 1</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</div></pre></td></tr></table></figure></li><li><p><strong>Step 2</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo</div></pre></td></tr></table></figure></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</div></pre></td></tr></table></figure><ul><li><strong>Step 3</strong><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum makecache</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Step 1&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/
      
    
    </summary>
    
    
      <category term="yum" scheme="https://itoure.com/zhongchao1011.github.io/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>python生成随机密码</title>
    <link href="https://itoure.com/zhongchao1011.github.io/2017/09/13/python%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AF%86%E7%A0%81/"/>
    <id>https://itoure.com/zhongchao1011.github.io/2017/09/13/python生成随机密码/</id>
    <published>2017-09-13T05:11:10.000Z</published>
    <updated>2017-09-13T05:12:27.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="string">简短地生成随机密码，包括大小写字母、数字，可以指定密码长度</span></div><div class="line"><span class="string">'''</span></div><div class="line"><span class="comment">#生成随机密码</span></div><div class="line"><span class="keyword">from</span> random <span class="keyword">import</span> choice</div><div class="line"><span class="keyword">import</span> string</div><div class="line"></div><div class="line"><span class="comment">#python3中为string.ascii_letters,而python2下则可以使用string.letters和string.ascii_letters</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">GenPassword</span><span class="params">(length=<span class="number">8</span>,chars=string.ascii_letters + string.digits + string.punctuation)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>.join([choice(chars) <span class="keyword">for</span> i <span class="keyword">in</span> range(length)])</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</div><div class="line">    <span class="comment">#生成10个随机密码    </span></div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">        <span class="comment">#密码的长度为8</span></div><div class="line">        print(GenPassword(<span class="number">8</span>))</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/d
      
    
    </summary>
    
    
      <category term="python" scheme="https://itoure.com/zhongchao1011.github.io/tags/python/"/>
    
  </entry>
  
</feed>
